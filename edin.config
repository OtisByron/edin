#!/bin/bash


if [ "$1" -eq "" ] || [ "$1" -eq "--rnode-serial" ]; then
	RNODE_DEV=/dev/serial1
elif [ "$1" -eq "--rnode-usb" ]; then
	RNODE_DEV=/dev/serial0
fi

clear
echo
echo 'EDIN CONFIGURATION'
echo '-----------------------------------'
echo

# set EDIN ID based on MAC address
MAC4=`sudo cat /sys/class/net/wlan0/address | tail -c 9 | head -c 2`
MAC5=`sudo cat /sys/class/net/wlan0/address | tail -c 6 | head -c 2`
MAC6=`sudo cat /sys/class/net/wlan0/address | tail -c 3 | head -c 2`
MAC=$MAC4$MAC5$MAC6
ID=$(( 0x$MAC4$MAC5$MAC6 % 10 ))
sudo echo $ID > $HOME/edin.id
echo 'EDIN ID set to $ID'
echo

echo
echo 'Configuring Hardware'
echo

# disable bluetooth
if [ $( grep "disable-bt" /boot/config.txt | wc -l ) -eq "0" ]; then
	sudo systemctl disable bluetooth.service
	sudo echo enable_uart=1 >> /boot/config.txt
	sudo echo dtoverlay=pi3-disable-bt >> /boot/config.txt
fi
echo '   bluetooth disabled'
echo

# disable HDMI
if [ grep -c "tvservice" /etc/rc.local -eq "0" ]; then
	sudo /usr/bin/tvservice -o
	sudo echo /usr/bin/tvservice -o >> /etc/rc.local
fi
echo '   HDMI disabled'

echo
echo 'Installing Software'
echo

# update package list and install packages via apt-get
echo '   updating local package lists'
sudo apt-get update > /dev/null
echo '   installing repo packages'
readarry PACKAGES < $HOME/edin/package.list
IFS_ORIG=$IFS
IFS=;
for package in ${PACKAGES[@]}; do
	readarray PKG_NAME $package
	echo '      $PKG_NAME[0]'
	sudo apt-get -y -qq install $package > /dev/null
done
IFS=$IFS_ORIG
echo

# download files via curl
echo '   curling files'
if [ ! -d $HOME/edin/assets ]; then
	sudo mkdir $HOME/edin/assets
fi
cd $HOME/edin/assets
readarry FILES < $HOME/edin/curl.list
IFS_ORIG=$IFS
IFS=;
for file in ${FILES[@]}; do
	readarray FILE_NAME $file
	if [ ! -e $HOME/edin/assets/$FILE_NAME[0] ]; then
		echo '      $FILE_NAME[0]'
		sudo curl -s $file
	fi
done
IFS=$IFS_ORIG
echo

# clone repos via git
echo '   cloning git packages'
if [ ! -d $HOME/src ]; then
	sudo mkdir $HOME/src
fi
cd $HOME/src
readarray GIT < $HOME/edin/git.list
IFS_ORIG=$IFS
IFS=;
for repo in ${GIT[@]}; do
	cd $HOME/src
	readarray REPO_NAME $repo
	echo '      $REPO_NAME[0]'
	sudo git clone -q $repo
done
IFS=$IFS_ORIG
echo

# enable/disable/start/stop services via systemctl
echo '   configuring services'
echo
readarry SERVICES < $HOME/edin/services.list
for service in ${SERVICES[@]}; do
	echo '      $service'
	sudo systemctl $service
done

echo
echo 'Configuring RNode'
echo

# check that rnode is attached?
echo '   setting rnode for 915MHz'
#cd $HOME/src/rnodeconfigutil
#sudo ./rnodeconf /dev/serialAMA0 -T --freq 915000000 --bw 12500 --txp 14 --sf 8 --cr 6

echo
echo 'Configuring Serval'
echo

#cd $HOME/src
#sudo git clone -q git://github.com/servalproject/serval-dna.git
#cd serval-dna
#sudo autoreconf -f -i -I m4
#sudo ./configure
#sudo make

# We won't do this now, it takes literally forever
# Recommended that you run it on your own after setup
#sudo ./tests/all

exit 0

### Config Ad-Hoc WiFi

if [ `grep -c "wpa_supplicant" /etc/dhcpcd.conf | wc -l` -eq "0" ]; then
	echo Configuring Ad-Hoc WiFi
	sudo echo interface wlan0 >> /etc/dhcpcd.conf
	sudo echo static ip_address=192.168.5.$ID/24 >> /etc/dhcpcd.conf
	sudo echo nohook wpa_supplicant >> /etc/dhcpcd.conf
	sudo service dhcpcd restart
	echo Static IP set to 192.168.5.$ID
fi

if [ `grep -c "wlan0" /etc/dnsmasq.conf` -eq "0" ]; then
	sudo echo interface=wlan0 >> /etc/dnsmasq.conf
	sudo echo dhcp-range=192.168.5.10,192.198.5.254,255.255.255.0,24h >> /etc/dnsmasq.conf

	sudo touch /etc/hostapd/hostapd.conf
	sudo echo interface=wlan0 >> /etc/hostapd/hostapd.conf
	sudo echo driver=nl80211 >> /etc/hostapd/hostapd.conf
	sudo echo ssid=edin-$MAC >> /etc/hostapd/hostapd.conf
	
	echo SSID set to edin-$MAC
fi

### Disable ACT LED

if [ `grep -c "act_led_trigger" /boot/config.txt` -eq "0" ]; then
	echo Flashing ACT LED
	# flash LED
	echo Disabling ACT LED
	#sudo echo dtparam=act_led_trigger=none

#sudo echo dtparam=act_led_activelow=on
